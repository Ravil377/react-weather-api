{"version":3,"sources":["images/settings.png","images/navigation-cursor.svg","Weather/Weather.js","images/hamburger-menu.svg","images/loading.svg","Loading/Loading.js","WeatherSetting/WeatherSetting.js","Utils/WeatherApi.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","city","name","visibility","main","sys","wind","weather","arrowRotate","transform","deg","className","country","isCount","src","setting","alt","onClick","isOpenSetting","icon","description","Math","floor","temp","feels_like","arrow","style","speed","pressure","humidity","Loading","Spinner","WeatherSetting","React","useState","setCity","onDragStart","onDragEnd","onDragOver","onDrop","isLoading","isError","dragStartHandler","e","town","dragEndHandler","dragOverHandler","preventDefault","dropHandler","type","citys","map","id","draggable","onDragLeave","burger","handleClickRemove","onSubmit","placeholder","minLength","maxLength","value","onChange","target","required","weatherApi","options","this","_options","res","ok","json","Promise","reject","status","fetch","baseUrl","authorization","then","_answerForServer","App","setIsError","currentCity","setCurrentCity","setIsOpenSetting","setIsLoading","document","addEventListener","returnWeather","localStorage","getItem","JSON","parse","getIp","handleClickSubmit","catch","error","window","removeItem","length","setItem","stringify","handleClickSetting","state","errorAnimation","setTimeout","getWeatherByCity","newTown","find","item","checkDuplicate","oldTown","filter","background","idx","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3596acb6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/settings.4564248b.png\";","export default __webpack_public_path__ + \"static/media/navigation-cursor.d54c7a4e.svg\";","import React from \"react\";\r\nimport './Weather.css';\r\nimport setting from \"../images/settings.png\";\r\nimport arrow from '../images/navigation-cursor.svg';\r\n\r\nfunction Weather(props) {\r\n  const { name, visibility, main, sys, wind, weather } = props.city;\r\n\r\n    const arrowRotate = {\r\n      transform: `rotate(${180+wind?.deg}deg)`\r\n    }\r\n\r\n    const handleClickSetting = () => {\r\n      props.isOpenSetting();\r\n    }\r\n\r\n    return (\r\n      <div className=\"weather\">\r\n        <ul className=\"weather__items\">\r\n            <li className=\"weather__item\"><h4 className=\"weather__title\">{name}, {sys?.country }</h4>\r\n              {props.isCount === 0 && <img src={setting} alt=\"Настройка\" className=\"weather__setting\" onClick={handleClickSetting}></img>}\r\n            </li>\r\n            <li className=\"weather__item weather__image\">\r\n              <img className=\"weather__icon\" src={`http://openweathermap.org/img/wn/${weather && weather[0].icon}@2x.png`} \r\n                    alt={weather && weather[0].description} />\r\n              <p className=\"weather__temperature\">{Math.floor(main?.temp)}&deg;C</p>\r\n            </li>\r\n            <li className=\"weather__item\"><p className=\"weather__description\">Ощущается как {Math.floor(main?.feels_like)}&deg;C. {weather && weather[0].description}</p></li>\r\n            <li className=\"weather__item\">\r\n              <div className=\"weather__wind\"><img src={arrow} alt=\"arrow wind\" className=\"weather__description-wind-arrow\" style={arrowRotate}></img><p className=\"weather__description\"></p><p className=\"weather__description\">{wind?.speed}m/s</p></div>\r\n              <p className=\"weather__description\">{main?.pressure}hPa</p></li>\r\n            <li className=\"weather__item\"><p className=\"weather__description\">Humidity: {main?.humidity}%</p><p className=\"weather__description\">Dew point: 0C</p></li>\r\n            <li className=\"weather__item\"><p className=\"weather__description\">Visibility: {Math.floor(visibility/1000)}.0km</p></li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Weather;\r\n  ","export default __webpack_public_path__ + \"static/media/hamburger-menu.5ab0a901.svg\";","export default __webpack_public_path__ + \"static/media/loading.6b77aa8a.svg\";","import React from 'react';\r\nimport Spinner from '../images/loading.svg';\r\nimport './Loading.css';\r\n\r\nfunction Loading() {\r\n\r\n    return (\r\n        <img src={Spinner} alt=\"Загрузка\" className=\"loading\" />\r\n    );\r\n    \r\n}\r\n\r\nexport default Loading;","import React from \"react\";\r\nimport './WeatherSetting.css';\r\nimport burger from '../images/hamburger-menu.svg';\r\nimport Loading from \"../Loading/Loading\";\r\n\r\nfunction WeatherSetting(props) {\r\n    const [city, setCity] = React.useState();\r\n    const { onDragStart, onDragEnd, onDragOver, onDrop, isLoading, isError } = props;\r\n\r\n    const handleClickSetting = () => {\r\n        props.isOpenSetting();\r\n    }\r\n\r\n    const handleChangeCity = (e) => {\r\n        setCity(e.target.value);\r\n    }\r\n\r\n    const handleClickSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.onSubmit(city);\r\n        setCity('');\r\n    }\r\n\r\n    const handleClickRemove = (id) => {\r\n        props.onClick(id);\r\n    }\r\n\r\n    const dragStartHandler = (e, town) => {\r\n        onDragStart(e, town);\r\n    }\r\n\r\n    const dragEndHandler = (e) => {\r\n        onDragEnd(e);\r\n    }\r\n    \r\n    const dragOverHandler = (e) => {\r\n        e.preventDefault();\r\n        onDragOver(e);\r\n    }\r\n    \r\n    const dropHandler = (e, town) => {\r\n        e.preventDefault();\r\n        onDrop(e, town);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"setting\">\r\n                <h4 className=\"setting__title\">Settings</h4><button type=\"button\" className=\"setting__button-close\" onClick={handleClickSetting}></button>\r\n                <ul className=\"setting__list\">\r\n                    {props.citys.map((town) => {\r\n                        const { id, name, sys} = town;\r\n                        return (<li key={id} className=\"setting__list-item\"  \r\n                                draggable=\"true\"\r\n                                onDragStart={(e) => dragStartHandler(e, town)} \r\n                                onDragEnd={(e) => dragEndHandler(e)}\r\n                                onDragLeave={(e) => dragEndHandler(e)}\r\n                                onDragOver={(e) => dragOverHandler(e)}\r\n                                onDrop={(e) => dropHandler(e, town)}><img src={burger} className=\"setting__list-burger\" alt=\"Бургер\"></img><p className=\"setting__list-city\">{name}, {sys.country}</p><button type=\"button\" className=\"setting__button-remove\" onClick={() => handleClickRemove(id)}></button></li>)\r\n                    })}\r\n                </ul>\r\n                {isLoading && <Loading />}\r\n                <div className=\"setting__form-container\">\r\n                    <h4 className=\"setting__title\">Add Location:</h4>\r\n                    <form name=\"addCity\" className=\"setting__form\" onSubmit={handleClickSubmit}>\r\n                            <input type=\"text\" name=\"city\" \r\n                                placeholder=\"Город\"\r\n                                className={`setting__input ${isError && \"setting__input-error\"}`} \r\n                                minLength=\"2\" maxLength=\"40\" value={city || ''} onChange={handleChangeCity} \r\n                                required />\r\n                        <button type=\"submit\" className=\"setting__button-city-enter\"></button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default WeatherSetting;","class WeatherApi {\r\n    constructor(options) {\r\n        this._options = options;\r\n    }\r\n\r\n    _answerForServer(res) {\r\n        if (res.ok) {\r\n            return res.json();\r\n        }\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n\r\n    getWeatherByCity(city) {\r\n        return fetch(`${this._options.baseUrl}weather?q=${city}&appid=${this._options.authorization}&units=metric&lang=ru`)\r\n        .then((res) => this._answerForServer(res));\r\n    }\r\n\r\n    getIp() {\r\n        return fetch(\"https://ipinfo.io/json?token=6d7db8beb65196\")\r\n        .then((res) => this._answerForServer(res));\r\n    }\r\n}\r\n\r\nconst apiOptions = {\r\n    baseUrl: \"https://api.openweathermap.org/data/2.5/\",\r\n    authorization: \"43a03cf95baf7c1e3256b0f6aa9a38d7\",\r\n};\r\n\r\nconst weatherApi = new WeatherApi(apiOptions);\r\nexport default weatherApi;\r\n","import React from \"react\";\nimport Weather from \"./Weather/Weather\";\nimport WeatherSetting from \"./WeatherSetting/WeatherSetting\";\nimport weatherApi from \"./Utils/WeatherApi\";\n\nfunction App() {\n    const [isError, setIsError] = React.useState(false);\n    const [city, setCity] = React.useState([]);\n    const [currentCity, setCurrentCity] = React.useState();\n    const [isOpenSetting, setIsOpenSetting] = React.useState(false);\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        let returnWeather = localStorage.getItem(\"myWeather\");\n        if (!(returnWeather === null)) {\n            returnWeather = JSON.parse(returnWeather);\n            setCity(returnWeather);\n        } else {\n            weatherApi\n                .getIp()\n                .then((res) => {\n                    handleClickSubmit(res.city);\n                })\n                .catch((error) => setIsError(true));\n        }\n    });\n\n    window.addEventListener(\"beforeunload\", (e) => {\n        localStorage.removeItem(\"myWeather\");\n        if (city.length > 0) {\n            localStorage.setItem(\"myWeather\", JSON.stringify(city));\n        }\n    });\n\n    const handleClickSetting = () => {\n        if (city.length > 0) setIsOpenSetting((state) => !state);\n    };\n\n    const checkDuplicate = (newTown) => {\n        if (city.length > 0) {\n            return city.find((item) => item.id === newTown.id);\n        }\n        return false;\n    };\n\n    const errorAnimation = () => {\n      setIsError(true);\n      setIsLoading((state) => !state);\n      setTimeout(() => setIsError(false), 500);\n    }\n\n    const handleClickSubmit = (town) => {\n        setIsLoading((state) => !state);\n        weatherApi.getWeatherByCity(town).then((newTown) => {\n            if (!checkDuplicate(newTown)) {\n                setCity((oldTown) => [...oldTown, newTown]);\n                setIsLoading((state) => !state);\n            } else {\n                errorAnimation();\n                return;\n            }\n        }).catch(error => errorAnimation());\n    };\n\n    const handleClickRemove = (id) => setCity(() => city.filter((town) => town.id !== id));\n    const dragStartHandler = (e, town) => setCurrentCity(town);\n    const dragEndHandler = (e) => e.target.style.background = \"#ececec\";\n    const dragOverHandler = (e) => e.target.style.background = \"lightblue\";\n    const dropHandler = (e, town) => {\n        setCity(\n            city.map((item) => {\n                if (item.id === town.id) {\n                    return currentCity;\n                }\n                if (item.id === currentCity.id) {\n                    return town;\n                }\n                return item;\n            })\n        );\n        e.target.style.background = \"#ececec\";\n    };\n\n\n    return (\n        <>\n            {isOpenSetting && city ? (\n                <WeatherSetting\n                    isOpenSetting={handleClickSetting}\n                    onSubmit={handleClickSubmit}\n                    citys={city}\n                    onClick={handleClickRemove}\n                    onDragStart={dragStartHandler}\n                    onDragEnd={dragEndHandler}\n                    onDragOver={dragOverHandler}\n                    onDrop={dropHandler}\n                    isLoading={isLoading}\n                    isError={isError}\n                />\n            ) : (\n                city.map((item, idx) => <Weather key={item.id} isOpenSetting={handleClickSetting} city={item} isCount={idx} />)\n            )}\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}